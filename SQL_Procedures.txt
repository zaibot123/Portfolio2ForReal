CREATE OR REPLACE FUNCTION "public"."best_match"(VARIADIC "w" _text)
  RETURNS TABLE("title_id" varchar, "title_name" varchar, "title_type" varchar, "poster" varchar, "title_plot" varchar, "start_year" bpchar, "end_year" bpchar, "runtime" int4, "is_adult" bool, "nr_ratings" int4, "avg_rating" numeric, "rank" int8) AS $BODY$
DECLARE
        q text;
        w_elem text;
BEGIN
    q := 'select title.title_id, title.title_name, title.title_type,
		      title.poster, title.title_plot, title.start_year, title.end_year,
					title.runtime, title.is_adult, title.nr_ratings, title.avg_rating, 
					sum(score) rank 
	 
               from title, (' ||
          'select distinct title_id, 1 score from keyword_search where keyword = ''' || w[1] || '''';
FOREACH w_elem IN ARRAY w[2:]
LOOP
                q := q ||
                ' union all ' ||
                ' select distinct title_id, 1 score from keyword_search
                  where keyword = ''' || w_elem || '''';
END LOOP;
q := q || ') as bigunion where title.title_id = bigunion.title_id
             GROUP BY title.title_id, title.title_name
                         ORDER BY rank desc';
RAISE NOTICE '%', q;
RETURN QUERY EXECUTE q;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
	
-------------------------------------------------

CREATE OR REPLACE FUNCTION "public"."bookmark_function"("u" varchar, "i" varchar)
  RETURNS TABLE("title_id" varchar, "username" bpchar) AS $BODY$
BEGIN



INSERT INTO bookmark
VALUES (u, i);



return query
SELECT  bookmark.title_id, bookmark.username from bookmark WHERE bookmark.title_id = i and bookmark.username = u;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000

--------------------------------------------------

CREATE OR REPLACE FUNCTION "public"."co_actors_function"("actor" varchar)
  RETURNS TABLE("prof_id" varchar, "prof_name" varchar, "birth_year" varchar, "death_year" varchar, "frequency" varchar)
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000

(SELECT DISTINCT prof_id, prof_name, birth_year, death_year, "count"(*) as frequency from co_actors_view NATURAL JOIN has_professions NATURAL JOIN professionals WHERE title_id in
(SELECT title_id FROM co_actors_view NATURAL JOIN casting WHERE prof_name = actor) and prof_name != actor
GROUP BY prof_id, prof_name, birth_year, death_year
ORDER BY frequency desc
LIMIT 10);

	

--------------------------------------------------


CREATE OR REPLACE FUNCTION "public"."delete_bookmark_function"("u" varchar, "i" varchar)
  RETURNS TABLE("title_id" varchar, "username" bpchar) AS $BODY$
BEGIN



DELETE FROM bookmark
WHERE bookmark.title_id = i and bookmark.username = u;



return query
SELECT  bookmark.title_id, bookmark.username from bookmark WHERE bookmark.title_id = i and bookmark.username = u;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
	

	
	

	
---------------------------------------------------




CREATE OR REPLACE FUNCTION "public"."delete_rating_function"("username_" varchar, "title_id" varchar)
  RETURNS "pg_catalog"."void" AS $BODY$
BEGIN

if (username_ not in 
(select username from rating_history where delete_rating_function.title_id = rating_history.title_id ))
THEN 
raise exception 'Nothing to delete';


else 
UPDATE title
set avg_rating = avg_rating - ((select distinct rating from rating_history where rating_history.title_id=delete_rating_function.title_id and username =username_) - title.avg_rating)/title.nr_ratings where title.title_id = delete_rating_function.title_id;


UPDATE title
set nr_ratings = nr_ratings - 1 where title.title_id = delete_rating_function.title_id;

delete from rating_history 
where delete_rating_function.title_id = rating_history.title_id;
end if;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
	
	
	
------------------------------------------------------



CREATE OR REPLACE FUNCTION "public"."excact_search"(VARIADIC "w" _text)
  RETURNS TABLE("title_id" varchar, "title_name" varchar, "title_type" varchar, "poster" varchar, "title_plot" varchar, "start_year" bpchar, "end_year" bpchar, "runtime" int4, "is_adult" bool, "nr_ratings" int4, "avg_rating" numeric) AS $BODY$
DECLARE
w_elem text;
endd text= ''')';
startt text=
'select title.title_id, title.title_name, title.title_type,
 title.poster, title.title_plot, title.start_year, title.end_year,
title.runtime, title.is_adult, title.nr_ratings, title.avg_rating  from title where title_id in
(select title_id from keyword_search where keyword = ''';
t text = '';
q text;
BEGIN
FOREACH w_elem IN ARRAY w
LOOP
if w_elem != w[array_upper(w, 1)] then
t := t || w_elem || endd || 'or title_id in ( select title_id from keyword_search where keyword =''';
else 
t := t || w_elem || endd;
end if;
END LOOP;
q= startt || t ;
RAISE NOTICE '%', q;
RETURN QUERY EXECUTE q;
END $BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
	
	
--------------------------------------------------------



CREATE OR REPLACE FUNCTION "public"."person_words"("person_name" varchar, "lim" int4=10)
  RETURNS TABLE("words" varchar, "c_count" int8) AS $BODY$
BEGIN 
RETURN QUERY
select distinct keyword,count(keyword)
from(
select distinct title_id
from casted_in 
where prof_name=person_name) as tempp natural join keyword_search
group by keyword
order by count DESC
limit lim;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
	
	
---------------------------------------------------------


CREATE OR REPLACE FUNCTION "public"."populer_actors"("movie" varchar)
  RETURNS TABLE("prof_name" varchar, "prof_rating" numeric, "prof_id" varchar, "death_year" bpchar, "birth_year" bpchar) AS $BODY$
BEGIN
RETURN QUERY

SELECT professionals.prof_name, professionals.prof_rating, professionals.prof_id, professionals.death_year, professionals.birth_year from professionals NATURAL JOIN casted_in
WHERE casted_in.title_id = movie
ORDER BY professionals.prof_rating desc
LIMIT 10;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
	
----------------------------------------------------------




CREATE OR REPLACE FUNCTION "public"."rating_function"("username_" varchar, "rated_" varchar, "rating_" int4)
  RETURNS "pg_catalog"."void" AS $BODY$
BEGIN


if (rating_ not in (select scale from rating_scale)) then
raise exception 'input unknown, please select a number from 1 to 10, where 1 is awful and 10 is brilliant';
end if;


if(username_ in (SELECT rating_history.username from rating_history) and rated_ in (SELECT title_id from rating_history)) then


UPDATE title
set avg_rating = avg_rating - ((select distinct rating_ from rating_history) - title.avg_rating)/title.nr_ratings where title.title_id = rated_;

UPDATE title
set nr_ratings = nr_ratings - 1 where title_id = rated_;

DELETE FROM rating_history where title_id = rated_;
end if;


INSERT INTO rating_history 
VALUES(username_, rated_, rating_);


UPDATE title 
set nr_ratings = nr_ratings + 1 where title.title_id = rated_;


UPDATE title
set avg_rating = avg_rating + ((select distinct rating_ from rating_history) - title.avg_rating)/title.nr_ratings where title.title_id = rated_;



END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100

----------------------------------------------------------------
	
	
	
	CREATE OR REPLACE FUNCTION "public"."similar_movies"("movie" varchar)
  RETURNS TABLE("genre" varchar, "title_id" varchar, "title_name" varchar, "poster" varchar) AS $BODY$
BEGIN



RETURN QUERY



SELECT distinct has_genre.genre, temp_title_table.title_id, temp_title_table.title_name,temp_title_table.poster
from
(
select *
from keyword_search natural join title
where  keyword in
(select keyword
from title natural join keyword_search
where title.title_id=movie
group by keyword,title.title_name,title.poster
order by count(keyword) desc
limit 10)) as temp_title_table NATURAL JOIN has_genre
WHERE has_genre.genre in (SELECT has_genre.genre from has_genre NATURAL JOIN title where title.title_id =movie) and temp_title_table.title_id!=movie;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
	
	
	
	
------------------------------------------------------------------



CREATE OR REPLACE FUNCTION "public"."simple_search"("username" varchar, "user_input" varchar, "page" int4, "pagesize" int4)
RETURNS TABLE("title_id" varchar, "title_name" varchar, "title_type" varchar, "poster" varchar, "title_plot" varchar, "start_year" bpchar, "end_year" bpchar, "runtime" int4, "is_adult" bool, "nr_ratings" int4, "avg_rating" numeric) AS $BODY$
BEGIN

IF (simple_search.username IN (SELECT search_history.username FROM search_history) AND user_input IN (SELECT search_string FROM search_history)) THEN
DELETE FROM search_history
WHERE search_history.username = simple_search.username AND search_history.search_string = simple_search.user_input;

END IF;

INSERT INTO search_history
VALUES (username,user_input);

RETURN QUERY
SELECT *
FROM title
WHERE title.title_name ILIKE CONCAT('%',user_input,'%') OR title.title_plot ILIKE CONCAT('%',user_input,'%')
ORDER BY title.title_name
OFFSET page * pagesize
LIMIT pagesize ;


END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
	
	
--------------------------------------------------------------------



CREATE OR REPLACE FUNCTION "public"."simple_search_count"("username" varchar, "user_input" varchar)
  RETURNS "pg_catalog"."int4" AS $BODY$
BEGIN


RETURN (
SELECT count (*)::int
FROM title
WHERE title.title_name ILIKE CONCAT('%',user_input,'%') OR title.title_plot ILIKE CONCAT('%',user_input,'%')
);
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
	
	
--------------------------------------------------------------------



CREATE OR REPLACE FUNCTION "public"."simple_search_person"("user_input" varchar)
  RETURNS TABLE("prof_id" varchar, "prof_name" varchar, "characters" varchar, "title_name" varchar) AS $BODY$
BEGIN 
RETURN QUERY 
SELECT professionals.prof_id, professionals.prof_name, casting.characters, title.title_name
FROM professionals NATURAL JOIN casting NATURAL JOIN title
WHERE professionals.prof_name ILIKE CONCAT('%',user_input,'%') OR casting.characters ILIKE CONCAT('%',user_input,'%');
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
	
--------------------------------------------------------------------


CREATE OR REPLACE FUNCTION "public"."structured_search"("title_input" varchar, "plot_input" varchar, "characters_input" varchar, "name_input" varchar)
  RETURNS TABLE("title" varchar, "plot" varchar, "characters" varchar, "profname" varchar) AS $BODY$
BEGIN 
RETURN QUERY 
Select * 
from(
SELECT title_name,title_plot, casting.characters,prof_name
from title natural join co_actors_view natural join casting
where title_name like CONCAT('%',title_input,'%')) as foo
where title_plot ilike (CONCAT('%',(plot_input),'%')) and foo.characters ilike (CONCAT('%',(characters_input),'%')) and prof_name ilike CONCAT('%',(name_input),'%');
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
	
	
	
	
--------------------------------------------------------------------


CREATE OR REPLACE FUNCTION "public"."structured_search_person"("name_input" varchar, "prof_input" varchar, "characters_input" varchar)
  RETURNS TABLE("name" varchar, "profession" varchar, "characters" varchar, "title_name" varchar) AS $BODY$
BEGIN 
RETURN QUERY 
SELECT * 
FROM(
SELECT prof_name, has_professions.profession, casting.characters, title.title_name
FROM has_professions NATURAL JOIN professionals NATURAL JOIN co_actors_view NATURAL JOIN casting NATURAL JOIN title
WHERE prof_name LIKE CONCAT('%',name_input,'%')) AS foo
WHERE foo.profession LIKE CONCAT('%',prof_input,'%') AND foo.characters LIKE CONCAT('%',characters_input,'%');
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
	
	
---------------------------------------------------------------------



CREATE OR REPLACE FUNCTION "public"."update_function"("username_" varchar, "bio_" varchar, "photo_" varchar, "email_" varchar)
  RETURNS "pg_catalog"."void" AS $BODY$
BEGIN


update users
set email ='N/A' where email is null and username = username_;

if (email_ not in (select email from users))
then
update users
set email=email_ where username = username_;
end if;

update users
set bio=bio_ where username = username_;

update users
set photo=photo_ where username = username_;


END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
	
------------------------------------------------------------------------


CREATE OR REPLACE FUNCTION "public"."word_to_word"(VARIADIC "w" _text)
  RETURNS TABLE("words" varchar, "c_count" int8) AS $BODY$
DECLARE
        q text;
        w_elem text;
BEGIN
    q := '
select keyword, sum(score) rank
from title natural join keyword_search natural join (' ||
'select distinct title_id, 1 score from keyword_search where keyword = ''' || w[1] || '''';
FOREACH w_elem IN ARRAY w[2:]
LOOP
                q := q ||
' union all ' ||
' select distinct title_id, 1 score from keyword_search
where keyword = ''' || w_elem || '''';



END LOOP;
q := q ||



') as bigunion where title.title_id = bigunion.title_id
GROUP BY keyword
ORDER BY rank desc';



RAISE NOTICE '%', q;
RETURN QUERY EXECUTE q;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
